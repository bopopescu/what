#!/bin/bash
#
# Used during packaging.
#
# Do not run if you are not in a scratch checkout!
#
# THIS SCRIPT WILL DELETE YOUR .YOMP DIRECTORY AND ALL YOUR HISTORY WILL BE
# LOST. THIS IS ON PURPOSE!

set -o errexit
set -o nounset
set -o pipefail

USAGE=`cat <<USAGE_WARNING
${0} is used by rpm-creator.py to prepare a YOMP checkout of this repo for
packaging.

You almost certainly do not want to run this in your checkout; it deletes
all the .py files from the current directory (and all subdirectories), then
nukes the .YOMP directory as well. This is likely to make you very sad if it
happens someplace you are doing work.

If you really, *really* want to run it, do:

${0} --destroy-all-my-work

USAGE_WARNING`

if [ $# == 0 ]; then
  echo "$USAGE"
  exit 0
fi

if [ $1 != "--destroy-all-my-work" ]; then
  echo "$USAGE"
  exit 0
fi

# Per MER-1056, remove all .py files and scrub .YOMP directory before
# creating an RPM.

echo "Capturing YOMP SHA..."
YOMPsha=`YOMP rev-parse --verify HEAD`
echo ${YOMPsha} > static/YOMP.sha
echo ${YOMPsha}

echo "Recording YOMP Release Version..."
bin/update_release_version.py `python -c 'from YOMP.__version__ import __version__; print __version__'`-$(YOMP rev-list HEAD | wc -l)
python -c 'from YOMP.__version__ import __version__; print __version__'

echo "Removing stale .pyc files"
find . -name '*.pyc' -delete

echo "**************************"
export PATH=/opt/numenta/anaconda/bin:$PATH
echo $PATH

echo "Compiling all .py files..."
for src_d in conf docs YOMP
do
  # compileall only drills 10 deep, so rather than having a mysterious
  # failure later if our directory structure gets more complex, compile
  # in every subdir.
  if [ -d $src_d ]; then
    echo "Compiling .py files in ${src_d}"
    find $src_d -type d -exec python -m compileall '{}' ';'
  else
    echo "**********"
    echo "$src_d not found during .py compilation in prepare_repo_for_packaging"
    echo "**********"
    exit 1
  fi
done

echo "Purging .py files:"
for src_d in YOMP/app
do
  # Don't remove migrate.py to cope with Marketplace 1.0 bug. Version 1.0
  # expected to find migrate.py in YOMP/app/repository, but
  # when we started purging the .py files this meant the db migration wasn't
  # getting run. Exclude migrate.py from deletion so 1.0 boxes won't choke
  # during updates.
  if [ -d $src_d ]; then
    echo "Purging .py files in ${src_d}"
    find ${src_d} -path YOMP/app/repository/migrations -prune -o \( -iname "*.py" ! -iname "migrate.py" \) -print0 | xargs -0 rm -f
  else
    echo "**********"
    echo "$src_d not found during .py purge phase in prepare_repo_for_packaging"
    echo "**********"
    exit 1
  fi
done

# Delete configs so they are not embedded in the RPM. Conf files should
# be generated by python setup.py init, not installed from a rpm.

echo "running YOMP clean -xf conf/"
YOMP clean -xf conf/

if [ -d conf ]; then
  echo "Nuking conf files that have corresponding .tpl files"
  for raw_f in conf/*.tpl
  do
    template_f=`basename $raw_f`
    rm -fv conf/${template_f%%.*}.conf
  done
  echo "exclude conf/overrides from rpm explicitly"
  rm -fv conf/overrides/*
else
  echo "WTF, where is conf directory?"
  echo -n "pwd: "
  pwd
fi

# Scrub egg-link files. They inevitably point to directories on the build
# machine that will not be on the machines we're installing the RPM on, so
# kill them with fire.
find . -name '*.egg-link' -exec rm '{}' ';'

# Scrub random garbage
rm -f .YOMPignore \
      .bowerrc \
      .project \
      .pydevproject \
      CI.lock

# And finally, nuke the .YOMP directory
echo "Purging .YOMP directory..."
rm -fr .YOMP

cat << KABOOM



     _.-^^---....,,--
 _--                  --_
<                        >)
|          BOOM!          |
 \._                   _./
    ``---. . , ; .--'''
          | |   |
       .-=||  | |=-.
       \-=#$%&%$#=-'
          | ;  :|
 _____.,-#%&*@%#&#~,._____


.py files have been purged, along with your .YOMP directory.
KABOOM

# Keep prep script out of the RPM
rm -f prepare_repo_for_packaging
